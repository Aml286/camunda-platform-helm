version: '3'

vars:
  TEST_NAMESPACE: '{{ env "TEST_NAMESPACE" | default "camunda-platform" }}'
  TEST_CLUSTER_TYPE: '{{ env "TEST_CLUSTER_TYPE" | default "kubernetes" }}'
  TEST_HELM_EXTRA_ARGS: '{{ env "TEST_HELM_EXTRA_ARGS" }}'
  FIXTURES_DIR: ../fixtures
  TEST_CHART_DIR: ../../../../
  TEST_TMP_DIR: /tmp
  
  LATEST_RELEASE_SOURCE: camunda/camunda-platform
  # LATEST_RELEASE_PATH: '{{ (printf "%s/camunda-platform/" .TEST_TMP_DIR) }}'
  LATEST_RELEASE_PATH: '{{ .TEST_TMP_DIR }}/camunda-platform/'

  CAMUNDA_HELM_REPO_ROOT: '{{ env "PWD" }}'
  PR_SOURCE_CHART: '{{ .CAMUNDA_HELM_REPO_ROOT }}/charts/camunda-platform'

dotenv:
- ../vars/{{ .TEST_CLUSTER_TYPE }}.env

includes:
  init.seed:
    taskfile: ../lib/create-setup-secrets-taskfile.yaml
    internal: true
  test.preflight:
    taskfile: ../lib/create-venom-job-taskfile.yaml
    vars:
      testID: preflight
  test.core:
    taskfile: ../lib/create-venom-job-taskfile.yaml
    vars:
      testID: core

tasks:
  setup.pre:
    preconditions:
    - test -n "${TEST_DOCKER_USERNAME_CAMUNDA_CLOUD}"
    - test -n "${TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD}"
    - test -n "${TEST_INGRESS_HOST}"
    cmds:
    # This is needed to access WebModeler Docker image since it's not public.
    - kubectl create secret docker-registry registry-camunda-cloud
        --namespace {{ .TEST_NAMESPACE }}
        --docker-server "registry.camunda.cloud"
        --docker-username "${TEST_DOCKER_USERNAME_CAMUNDA_CLOUD}"
        --docker-password "${TEST_DOCKER_PASSWORD_CAMUNDA_CLOUD}"
    - echo "VENOM_VAR_SKIP_TEST_INGRESS=false" >> ../../testsuites/base/files/variables.env
    - echo "VENOM_VAR_TEST_INGRESS_HOST=${TEST_INGRESS_HOST}" >> ../../testsuites/base/files/variables.env
    - echo "VENOM_VAR_SKIP_TEST_WEBMODELER=false" >> ../../testsuites/base/files/variables.env
    - echo "VENOM_EXTRA_ARGS=--var-from-file=./vars/variables-ingress-combined.yaml" >>
      ../../testsuites/base/files/variables.env
    - echo "TEST_CHART_FLOW={{ .TEST_CHART_FLOW }}"
    - echo "TEST_CHART_DIR={{ .TEST_CHART_DIR }}"
    - echo "TEST_TMP_DIR={{ .TEST_TMP_DIR }}"
    - echo "ls TEST_TMP_DIR"
    - echo "TEST_CHART_DIR_ABSOLUTE_PATH"
    - readlink -f {{ .TEST_CHART_DIR }}
    - echo "CAMUNDA_HELM_REPO_ROOT"
    - readlink -f {{ .CAMUNDA_HELM_REPO_ROOT }}
    - ls -al {{ .TEST_TMP_DIR }}
    - |
      # Extract OpenShift values from released chart for upgrade test.
      if [[ "${TEST_CHART_FLOW}" == 'upgrade' ]]; then
        helm pull {{ .LATEST_RELEASE_SOURCE }} --untar --untardir {{ .LATEST_RELEASE_PATH }}
      fi
    - echo "ls TEST_TMP_DIR"
    - ls -al {{ .TEST_TMP_DIR }}
    - |
      # Create the local chart package to install.
      helm package {{ .TEST_CHART_DIR }}

  setup.exec:
    deps: [init.seed]
    cmds:
    - |
      if [[ "${TEST_CLUSTER_TYPE}" == "openshift" ]]; then
        export TEST_OPENSHIFT_ARGS="--values {{ .PR_SOURCE_CHART }}/openshift/values.yaml --post-renderer bash --post-renderer-args {{ .PR_SOURCE_CHART }}/openshift/patch.sh"
      fi
    - helm install integration {{ .PR_SOURCE_CHART }}
        --namespace {{ .TEST_NAMESPACE }}
        --values {{ .FIXTURES_DIR }}/values-integration-test.yaml
        --values ./values-integration-test-ingress.yaml
        --timeout 20m0s
        --wait
        {{ .TEST_HELM_EXTRA_ARGS }} $TEST_OPENSHIFT_ARGS

  setup.post:
    cmds:
    - echo "No post task for this test."

  setup.clean:
    cmds:
    - kubectl delete secret registry-camunda-cloud --ignore-not-found=true
    - git checkout ../../testsuites/base/files/variables.env

  upgrade.install-latest-release:
    deps: [init.seed]
    cmds:
    - |
      if [[ "${TEST_CLUSTER_TYPE}" == "openshift" ]]; then
        export TEST_OPENSHIFT_ARGS="--values {{ .LATEST_RELEASE_PATH }}/openshift/values.yaml --post-renderer bash --post-renderer-args {{ .LATEST_RELEASE_PATH }}/openshift/patch.sh"
      fi
    - helm install integration {{ .LATEST_RELEASE_PATH }}
        --namespace {{ .TEST_NAMESPACE }}
        --values {{ .FIXTURES_DIR }}/values-integration-test.yaml
        --values ./values-integration-test-ingress.yaml
        --timeout 20m0s
        --wait
        {{ .TEST_HELM_EXTRA_ARGS }} $TEST_OPENSHIFT_ARGS

  upgrade.pre:
    cmds:
    - echo "No pre setup task for this test."

  upgrade.upgrade-from-latest-to-pr:
    cmds:
    - |
      if [[ "${TEST_CLUSTER_TYPE}" == "openshift" ]]; then
        export TEST_OPENSHIFT_ARGS="--values {{ .PR_SOURCE_CHART }}/openshift/values.yaml --post-renderer bash --post-renderer-args {{ .PR_SOURCE_CHART }}/openshift/patch.sh"
      fi
    - |
      export TEST_SECRET=$(kubectl get secret "integration-test" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.client-secret}" | base64 --decode)
      export ZEEBE_SECRET=$(kubectl get secret "integration-zeebe-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.zeebe-secret}" | base64 --decode)
      export TASKLIST_SECRET=$(kubectl get secret "integration-tasklist-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.tasklist-secret}" | base64 --decode)
      export OPTIMIZE_SECRET=$(kubectl get secret "integration-optimize-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.optimize-secret}" | base64 --decode)
      export OPERATE_SECRET=$(kubectl get secret "integration-operate-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.operate-secret}" | base64 --decode)
      export CONNECTORS_SECRET=$(kubectl get secret "integration-connectors-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.connectors-secret}" | base64 --decode)
      export CONSOLE_SECRET=$(kubectl get secret "integration-console-identity-secret" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.console-secret}" | base64 --decode)
      export KEYCLOAK_ADMIN_SECRET=$(kubectl get secret "integration-keycloak" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.admin-password}" | base64 --decode)
      export KEYCLOAK_POSTGRESQL_SECRET=$(kubectl get secret "integration-postgresql" \
        -n $TEST_NAMESPACE -o jsonpath="{.data.postgres-password}" | base64 --decode)

      helm upgrade integration {{ .PR_SOURCE_CHART }} \
        --namespace {{ .TEST_NAMESPACE }} \
        --values {{ .FIXTURES_DIR }}/values-integration-test.yaml \
        --set test.existingSecret=$TEST_SECRET \
        --set global.identity.auth.zeebe.existingSecret=$ZEEBE_SECRET \
        --set global.identity.auth.tasklist.existingSecret=$TASKLIST_SECRET \
        --set global.identity.auth.optimize.existingSecret=$OPTIMIZE_SECRET \
        --set global.identity.auth.operate.existingSecret=$OPERATE_SECRET \
        --set global.identity.auth.connectors.existingSecret=$CONNECTORS_SECRET \
        --set global.identity.auth.console.existingSecret=$CONSOLE_SECRET \
        --set identityKeycloak.auth.adminPassword=$KEYCLOAK_ADMIN_SECRET \
        --set identityKeycloak.postgresql.auth.password=$KEYCLOAK_POSTGRESQL_SECRET \
        --set identityPostgresql.auth.password=dummy \
        --timeout 20m0s \
        --wait {{ .TEST_HELM_EXTRA_ARGS }} $TEST_OPENSHIFT_ARGS

  all:
    cmds:
    - task: init.seed
    - task: setup.pre
    - task: setup.exec
    - task: setup.post
    - task: test.preflight
    - task: test.core
